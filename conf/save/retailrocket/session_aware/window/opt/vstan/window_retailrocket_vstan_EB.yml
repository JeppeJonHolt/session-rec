type: opt # single|window, maybe add opt
key: uvstan_EB #added to the csv names
evaluation: evaluation_user_based #evaluation|evaluation_last|evaluation_multiple|evaluation_user_based|evaluation_user_based_multiple
data:
  name: retailrocket #added in the end of the csv names
  folder: data/retailrocket/prepared_window/
  prefix: events.2
  type: hdf #hdf (if there is no type, the default is csv)
  #opts: {sessions_test: 10}

results:
  folder: results/opt/window/retailrocket/uvstan/EB/

metrics:
- class: accuracy_multiple.Precision
  length: [5,10,15,20]
- class: accuracy_multiple.Recall
  length: [5,10,15,20]
- class: accuracy_multiple.MAP
  length: [5,10,15,20]
- class: accuracy.HitRate
  length: [5,10,15,20]
- class: accuracy.MRR
  length: [5,10,15,20]

optimize:
  class: accuracy.MRR
  length: [20]
  iterations: 100 #optional

algorithms:
- class: knn.uvstan.U_VSKNN_STAN
  params: {}
  params_opt:
    k: [100,200,500,1000,1500,2000]
    sample_size: [1000,2500,5000,10000]
    similarity: ['cosine','vec']
    #stan
    lambda_spw: [0.00001,0.4525,0.905,1.81,3.62,7.24]
    lambda_snh: [2.5,5,10,20,40,80,100]
    lambda_inh: [0.00001,0.4525,0.905,1.81,3.62,7.24]
    #vsknn
    lambda_ipw: [0.00001,0.4525,0.905,1.81,3.62,7.24]
    lambda_idf: [False,1,2,5,10]
    extend_session_length: {from: 1, to: 25, in: 25, type: int32}
    boost_own_sessions: {from: 0.1, to: 3.9 , in: 20, type: float32}
  key: vstan_EB